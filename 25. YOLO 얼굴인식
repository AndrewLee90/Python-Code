openCV, YOLO를 활용한 얼굴인식 도어락 아이디어


import cv2  # OpenCV 라이브러리로 카메라 제어 및 이미지 처리를 위한 모듈
import streamlit as st  # 간단한 웹 앱 제작을 위한 Streamlit 라이브러리
import os  # 파일 저장 경로 관리에 필요한 모듈
import time  # 시간 관련 작업 (딜레이, 타임스탬프) 처리에 필요한 모듈

class CameraApp:
    def __init__(self):
        # 클래스 생성자, 필요한 변수 초기화
        self.capture = None  # 현재 캡처된 사진 데이터
        self.photo_saved = None  # 저장된 사진의 경로
        self.is_camera_active = False  # 카메라 작동 상태를 추적

    def check_camera_in_use(self):
        """웹캠이 사용 중인지 확인하는 메서드"""
        cap = cv2.VideoCapture(0)  # 기본 카메라(0번 장치) 접근 시도
        if not cap.isOpened():
            return True  # 카메라를 열 수 없으면 다른 앱에서 사용 중으로 간주
        ret, _ = cap.read()  # 카메라에서 프레임 읽기 시도
        cap.release()  # 카메라 리소스를 해제
        if not ret:
            return True  # 프레임을 읽지 못하면 사용 중으로 간주
        return False  # 카메라가 사용 중이 아님

    def capture_photo(self):
        """사진을 촬영하고 저장하는 메서드"""
        cap = cv2.VideoCapture(0)  # 기본 카메라(0번 장치) 접근
        time.sleep(1)  # 카메라 안정화를 위해 1초 대기
        if not cap.isOpened():
            st.error("카메라를 열 수 없습니다.")  # 오류 메시지 출력
            return None, None
        
        ret, frame = cap.read()  # 사진 촬영(프레임 읽기)
        if ret:
            filename = f"captured_{int(time.time())}.jpg"  # 파일 이름 생성 (타임스탬프 기반)
            filepath = os.path.join(os.getcwd(), filename)  # 현재 디렉토리 기준 저장 경로 생성
            cv2.imwrite(filepath, frame)  # 이미지를 지정된 경로에 저장
            self.photo_saved = filepath  # 저장된 경로를 클래스 변수에 저장
            cap.release()  # 카메라 리소스 해제
            return frame, filepath  # 프레임과 경로를 반환
        cap.release()  # 촬영 실패 시에도 리소스 해제
        return None, None

    def start_camera(self):
        """실시간 카메라 피드를 보여주는 메서드"""
        cap = cv2.VideoCapture(0)  # 기본 카메라 접근
        self.is_camera_active = True  # 카메라 활성 상태 플래그 설정
        start_time = time.time()  # 카메라 실행 시작 시간 저장
        st_frame = st.empty()  # Streamlit 내 실시간 피드를 표시할 공간 생성
        
        # 카메라 피드를 5초 동안 실행
        while time.time() - start_time < 5:
            ret, frame = cap.read()  # 프레임 읽기
            if not ret:
                break  # 읽기 실패 시 반복 종료
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # BGR(RGB) 색상 변환
            st_frame.image(frame, channels="RGB")  # Streamlit에 이미지 표시
        cap.release()  # 카메라 리소스 해제
        self.is_camera_active = False  # 카메라 비활성 상태 플래그 설정

    def show_ui(self):
        """Streamlit UI를 구성하는 메서드"""
        st.title("📷 AI 기반 얼굴 인식 보안 시스템")  # 제목 출력

        # 카메라 사용 상태 확인
        if self.check_camera_in_use():
            st.warning("웹캠을 다른 어플에서 사용 중입니다. 종료 후 다시 시도해주세요.")
            if st.button("🔄 재실행"):  # 재실행 버튼
                st.experimental_rerun()  # Streamlit 페이지 리로드
            return  # 이 상태에서는 더 이상 진행 불가
        
        # 사진 촬영 시작 버튼
        if st.button("📸 사진 촬영 시작"):
            self.start_camera()  # 카메라 활성화
            frame, path = self.capture_photo()  # 사진 촬영 및 저장
            if frame is not None:  # 촬영에 성공한 경우
                st.image(frame, caption="촬영된 사진", use_container_width=True)  # 촬영된 사진 표시
                if path:
                    st.success(f"✅ 사진이 저장되었습니다! 저장 경로: {path}")  # 저장 경로 출력
                
                col1, col2 = st.columns(2)  # 추가 동작을 위한 두 개의 버튼
                with col1:
                    if st.button("📷 추가 촬영"):
                        self.start_camera()  # 추가 촬영
                with col2:
                    if st.button("💾 사진 저장"):
                        st.success("📸 추가 저장이 완료되었습니다!")  # 저장 성공 메시지

if __name__ == "__main__":
    app = CameraApp()  # CameraApp 클래스의 인스턴스 생성
    app.show_ui()  # UI 표시




** 학습내용 정리 **
OpenCV를 사용한 카메라 제어

cv2.VideoCapture()를 사용해 카메라를 제어하며, 사진 촬영과 실시간 피드 제공 등의 기능을 구현하는 방법을 학습합니다. 
카메라 리소스를 안전하게 관리하기 위해 release()를 통해 사용 후 반드시 해제하는 방법을 이해할 수 있습니다.

Streamlit을 활용한 간단한 웹 애플리케이션 제작

streamlit을 사용해 사용자와 상호작용하는 UI를 구성하고, 버튼을 이용해 기능을 실행하는 기술을 익힙니다. 
st.button()을 통해 다양한 액션을 트리거하고, st.image()로 이미지를 사용자에게 표시하는 방법을 배울 수 있습니다.

사진 촬영 및 저장

cv2.imwrite()를 사용해 캡처한 이미지를 저장하며, 타임스탬프를 활용해 고유 파일명을 생성하는 방법을 학습합니다. 
저장 경로를 생성하고 파일 관리의 기초를 배울 수 있습니다.

카메라 사용 중 확인

cap.isOpened()와 cap.read()를 활용해 현재 카메라가 사용 중인지 확인하는 로직을 구현하며, 카메라 충돌 방지 및 오류 처리를 학습합니다.

클래스 기반 설계와 메서드 분리

CameraApp 클래스를 정의하여 카메라 제어, 실시간 피드, UI 구성 등의 기능을 각각의 메서드로 분리하고 캡슐화하는 객체 지향 설계를 학습합니다. 
생성자에서 변수 초기화를 수행하고, 클래스 내 상태를 저장하는 기술을 익힐 수 있습니다.

카메라 안정화 처리

사진 촬영 시 time.sleep(1)을 사용해 카메라를 안정화시킨 후 프레임을 읽는 방식으로 안정적인 결과를 얻는 기법을 이해합니다.

Streamlit을 활용한 UI 구성 및 버튼 연동

st.title(), st.warning(), st.success() 등을 사용해 사용자가 이해하기 쉽고 명확한 UI를 생성합니다. 
st.experimental_rerun()을 활용해 페이지를 새로고침하여 사용자 입력에 즉각 반응하는 방법을 학습합니다.

Streamlit 내 실시간 피드 구현

st.empty()와 image()를 사용하여 Streamlit 웹 앱 내에서 실시간 카메라 피드를 보여주는 기술을 학습합니다. 
프레임을 cv2.cvtColor()를 사용해 RGB로 변환하여 Streamlit에 적합한 포맷으로 출력하는 과정을 이해할 수 있습니다.

예외 처리 및 사용자 알림

사용자 오류(예: 카메라 접근 불가, 저장 실패)에 대해 st.error()와 st.warning()을 사용해 적절히 알림을 제공하며, 
예외 상황을 처리하는 방식을 학습합니다.
