- Python 기초 문법

input / print / list / tuple / dic / == / ! = / if / elif / else / str / for/ in / range 

input() → 사용자 입력을 받는 함수
print() → 값을 출력하는 함수

list → 여러 개의 값을 저장하는 변경 가능한 배열
tuple → 여러 개의 값을 저장하지만 변경 불가능한 배열

### ✅ **튜플 vs 리스트 차이점**

| 비교 항목              | **튜플 (`tuple`)**         | **리스트 (`list`)**       |
|---------------------- |----------------------------|--------------------------|
| **기본 구조**          | `()` (소괄호)              |  `[]` (대괄호)            |
| **값 변경 가능 여부**  | ❌ 변경 불가               |  ✅ 변경 가능             |
| **속도**              | ✅ 더 빠름                 |  ❌ 상대적으로 느림       |
| **사용 목적**         | 변경되지 않는 데이터 저장    |  변경이 필요한 데이터 저장  |



import / while / for / try / except / def 개념정리

| 문법              | 역할                | 사용 방식                   | 특징                           | 주의할 점                                                |
|-------------------|---------------------|-----------------------------|--------------------------------|---------------------------------------------------------|
| **`import`**      | 모듈 불러오기       | `import 모듈명`             | 외부 또는 내장 모듈을 사용 가능  | - 불필요한 모듈은 메모리 낭비 유발 가능<br>- `from 모듈명 import *` 사용 시 네임스페이스 오염 위험 |
| **`while`**       | 반복문              | `while 조건:`               | 조건이 참(`True`)일 때 반복 실행 | - 종료 조건이 없으면 무한 루프<br>- 반복 횟수 증가 시 성능 저하 가능  |
| **`for`**         | 반복문              | `for 변수 in iterable:`     | `iterable` 데이터를 순회하며 반복| - `range()`에 큰 값 설정 시 메모리 사용 증가 가능<br>- `break`, `continue` 사용 시 흐름 주의 |
| **`try-except`**  | 예외 처리           | `try: ... except 예외:`      | 오류 방지 및 특정 예외 처리 가능 | - 광범위한 예외 처리(`except Exception:`)는 예상치 못한 버그를 숨길 가능성 있음           |
| **`def` (함수)**  | 함수 정의           | `def 함수이름(매개변수):`    | 작업을 수행하는 코드 블록 정의 및 재사용 | - 전역 변수 남발 시 유지보수 어려움<br>- 긴 함수는 가독성 저하로 적절히 분리해야 함      |



## 학습내용 정리 ##

1. 조건문 (if-elif-else)
여러 조건을 검사하고, 조건에 따라 다른 명령을 실행하는 방법을 배웁니다.

조건을 논리적으로 연결하고, 필요한 경우 elif를 통해 추가 조건을 처리하는 로직을 이해합니다.

다양한 비교 연산자 (>, <, ==, >=, <=, !=)의 사용법과 활용 사례를 학습할 수 있습니다.

2. 반복문 (while)
코드를 반복적으로 실행하며 루프의 유용성을 익힐 수 있습니다.

반복문을 설계할 때 종료 조건 설정의 중요성을 이해하고, 이를 통해 무한 루프를 방지하는 방법을 배웁니다.

무한 루프와 같은 예외 상황을 처리하며 디버깅 능력을 키울 수 있습니다.

3. 사용자 입력 처리 (input)
input()을 통해 사용자로부터 데이터를 받아오고 이를 처리하는 과정을 학습할 수 있습니다.

입력된 데이터의 타입(예: 문자열, 정수)을 확인하고 필요한 경우 변환(int()와 같은 형변환)을 통해 사용할 수 있습니다.

4. 변수와 연산
변수를 활용해 데이터를 저장하고, 연산을 통해 값을 업데이트하는 법을 배웁니다.

game_count = game_count + 1과 같은 변수 값을 누적하는 방법을 연습할 수 있습니다.

5. 예외 처리 (try-except)
코드 실행 중 발생할 수 있는 에러를 대비하고 처리하는 법을 배웁니다.

try 블록에 실행할 코드를 작성하고, except 블록으로 예외 상황을 처리함으로써 프로그램의 안정성을 향상시키는 방법을 학습합니다.

특히, 잘못된 입력으로 인한 에러를 예방하고 친화적인 에러 메시지를 출력하는 방법을 배울 수 있습니다.

6. 문자열 포매팅
f-string을 사용해 동적인 문자열을 생성하고, 변수 값을 문자열에 포함시키는 방법을 학습합니다.

문자열 출력 시의 사용자 경험 개선 방법을 배울 수 있습니다.

7. 기본 디버깅 능력
코드를 실행하며 발생하는 논리적 오류나 예외 상황을 수정하는 과정을 통해 디버깅 능력을 키울 수 있습니다.

프로그램의 흐름을 이해하고, 예상치 못한 상황을 다루는 법을 익힐 수 있습니다.
