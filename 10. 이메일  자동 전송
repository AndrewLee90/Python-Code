** 준비 **
네이버 메일 서비스에서 POP3 / IMAP / SMTP 설정을 모두 사용함으로 설정해야 사용할 수 있다.

import smtplib  # smtplib 모듈을 import하여 이메일 전송 기능을 사용합니다.
from email.mime.text import MIMEText  # MIMEText 모듈을 import하여 이메일 본문을 작성합니다.

# 발신자 이메일과 비밀번호 설정
send_email = 'only4clovers@naver.com'  # 발신자 이메일 주소
send_pwd = 'ㅁㅁㅁㅁㅁㅁ'  # 네이버 SMTP용 앱 비밀번호

# 수신자 이메일을 리스트로 관리
recv_emails = ['only4clovers@gmail.com']  # 수신자 이메일 리스트

# SMTP 서버 정보 설정
smtp_name = 'smtp.naver.com'  # 네이버 SMTP 서버 주소
smtp_port = 587  # SMTP 서버 포트 번호

# 이메일 본문 작성
text = "네이버 SMTP를 사용하여 테스트 메일을 보냅니다."
msg = MIMEText(text, "plain", "utf-8")  # 본문 내용, 형식("plain"), 인코딩 설정
msg['Subject'] = "메일 테스트"  # 이메일 제목 설정
msg['From'] = send_email  # 발신자 이메일 설정
msg['To'] = ", ".join(recv_emails)  # 수신자 이메일을 문자열로 변환 (헤더 설정 용도)

try:
    # SMTP 서버 연결
    s = smtplib.SMTP(smtp_name, smtp_port)  # SMTP 객체를 생성해 서버에 연결
    s.starttls()  # TLS 암호화를 활성화하여 보안을 강화

    # SMTP 서버 로그인
    s.login(send_email, send_pwd)  # 발신자 이메일과 비밀번호로 로그인

    # 이메일 전송
    s.sendmail(send_email, recv_emails, msg.as_string())  # 이메일을 전송 (리스트 형태로 전달)

    # SMTP 서버 종료
    s.quit()  # 서버와의 연결 종료
    print("메일 전송 성공!")  # 성공 메시지 출력

except Exception as e:
    # 오류 발생 시 예외 처리
    print(f" 메일 전송 실패: {e}")  # 오류 메시지를 출력


** 학습내용 정리 **

1. smtplib 모듈 사용법 SMTP 객체를 생성하여 이메일 서버와 연결하고, 이메일을 전송하는 방법을 학습할 수 있습니다. 
TLS 암호화를 활성화(starttls())하고 SMTP 서버에 안전하게 로그인하는 과정을 배울 수 있습니다.

2. MIME 형식 설정 email.mime.text.MIMEText를 사용하여 이메일 본문을 작성하는 방법을 익힐 수 있습니다. 
이메일의 제목(msg['Subject']), 발신자(msg['From']), 수신자(msg['To']) 등의 헤더를 설정하는 법을 배웁니다.

3. 리스트를 활용한 다중 수신자 처리 수신자 이메일을 리스트(recv_emails)로 관리하며, 
sendmail() 메서드에서 리스트를 사용하여 이메일을 전송하는 기법을 학습합니다. 
헤더 설정에서는 수신자 리스트를 문자열로 변환(", ".join())하는 과정을 이해할 수 있습니다.

4. 오류 처리 try-except 블록을 사용하여 이메일 전송 시 발생할 수 있는 오류를 예외로 처리하는 방법을 배울 수 있습니다. 
오류 메시지를 출력하며 예외 상황을 디버깅하고 개선할 수 있습니다.

5. 이메일 전송 프로세스의 흐름 발신 
이메일, 비밀번호 설정 → SMTP 서버 연결 → TLS 활성화 → 로그인 → 이메일 작성 및 전송 → 서버 종료라는 
이메일 전송의 전체 흐름을 학습할 수 있습니다.


## 📚 참고자료

- POP3/ IMAP / SMTP 설정

### **📌 POP3 / IMAP / SMTP의 보안 이슈**

POP3, IMAP, SMTP는 **이메일을 주고받는 프로토콜**인데, 보안적으로 몇 가지 문제가 있음.

그래서 기업이나 개인이 보안 강화를 위해 **사용 안 함으로 설정**하는 경우가 많음.

---

### **🚨 보안 이슈**

### **1️⃣ POP3 (Post Office Protocol 3)**

- **단점:** 이메일을 서버에서 다운로드 후 삭제하는 방식이 일반적 → **다른 기기에서 동기화 불가능**
- **보안 문제:**
    - 기본적으로 **암호화되지 않은 텍스트(Plain Text)로 인증 정보(아이디, 비밀번호)를 전송**
    - 네트워크 감청(패킷 스니핑) 공격에 취약
    - 만약 암호화(TLS) 없이 사용하면 **계정 탈취 위험** 🚨

### **2️⃣ IMAP (Internet Message Access Protocol)**

- **장점:** 이메일을 서버에 유지하여 여러 기기에서 동기화 가능
- **보안 문제:**
    - **평문 인증 문제**: 암호화 없이 사용하면 로그인 정보가 노출될 가능성이 있음
    - **메일 저장 문제**: 서버에 메일이 남아 있기 때문에 **서버 해킹 시 정보 유출 위험**
    - **공격 대상 확대**: 여러 기기에서 접속하므로 **피싱 공격 및 중간자 공격(MITM)에 노출될 가능성**

### **3️⃣ SMTP (Simple Mail Transfer Protocol)**

- **SMTP는 이메일 발송용 프로토콜**
- **보안 문제:**
    - 기본적으로 암호화되지 않은 상태에서 이메일을 전송
    - **스푸핑(메일 위조), 피싱 공격**에 악용될 가능성이 높음
    - **오픈 릴레이(Open Relay) 문제:**
        - 인증 없이 누구나 SMTP 서버를 이용할 수 있으면 **스팸 메일 발송에 악용**될 가능성 있음

---

### **✅ 왜 기업들이 POP3 / IMAP / SMTP를 비활성화할까?**

✔ **암호화되지 않은 로그인 방식(Pop3, IMAP, SMTP 기본 설정)이 보안에 취약함**

✔ **스팸 발송, 피싱, 계정 도용 위험이 높음**

✔ **이메일을 클라이언트(Outlook, Thunderbird 등)에서 직접 관리하지 않고, 웹메일(Gmail, Office365 등)에서 관리하는 방식이 더 안전함**

✔ **OAuth 2.0과 같은 보안 인증 방식이 활성화되면서, 기존의 로그인 방식이 비효율적이 됨**

---

### **🛡 보안을 강화하는 방법**

1️⃣ **TLS/SSL을 사용하여 암호화 설정 강제 적용**

2️⃣ **기본 비밀번호 인증 대신 OAuth 2.0 사용 (예: 구글 앱 비밀번호, MS 인증 등)**

3️⃣ **POP3/IMAP/SMTP를 비활성화하고 웹메일(Gmail, Office365 등)만 사용**

4️⃣ **SMTP 릴레이 제한을 걸고, 발신자 인증(SPF, DKIM, DMARC) 적용**

---

### **📌 결론**

✔ **POP3/IMAP/SMTP를 보안 설정 없이 사용하면 심각한 보안 문제가 발생할 수 있음**

✔ 기업 환경에서는 보안 강화를 위해 **POP3/IMAP/SMTP를 차단하거나, OAuth 2.0 기반 인증을 강제하는 추세**

✔ 가능하면 웹메일 기반으로 사용하고, SMTP 릴레이 같은 기능도 **제한적으로 운영하는 게 안전함** 🚀

