**FLASK ?**

**Flask는 가볍고 유연한 Python 기반 웹 프레임워크로, 
빠르게 웹 애플리케이션과 API를 개발할 수 있도록 도와주는 도구.**

**Flask는 가벼운 웹 서비스나 API 개발에 적합하지만, 
복잡한 프로젝트에는 Django 같은 프레임워크가 더 유리할 수도 있음.**


Flask를 쓰는 이유	
가볍고 간단함	최소한의 코드로 웹 서버를 쉽게 구현 가능
유연성	필요한 기능만 추가하여 확장 가능
빠른 개발	복잡한 설정 없이 빠르게 웹 애플리케이션 제작 가능

Flask의 장점	
경량 프레임워크	불필요한 기능이 없어 빠르고 가벼움
확장성 높음	필요한 라이브러리만 추가하여 원하는 기능 구현 가능
사용이 쉬움	코드가 직관적이며 배우기 쉬움
자유로운 설계	개발자가 원하는 방식으로 설계 가능
커뮤니티 지원	Python 기반이라 많은 자료와 라이브러리 활용 가능

Flask의 단점	
기본 기능 부족	Django처럼 기본 제공되는 관리 도구가 적음
대규모 프로젝트 비효율적	프로젝트 규모가 커질수록 구조 관리가 어려움
보안 설정 필요	기본적으로 보안 기능이 부족해 직접 설정해야 함
비동기 처리 부족	Django나 FastAPI보다 비동기 성능이 떨어짐


# Flask 웹 프레임워크를 사용하여 웹 서버를 구축
from flask import Flask, render_template

# Flask 애플리케이션 생성
app = Flask(__name__)

# 루트 경로('/')에 접근하면 실행되는 함수
@app.route('/')
def hello():
    return "Backend Web Server using Flask."  # 기본 메시지 출력

# '/map' 경로에 접근하면 'uni_map.html' 파일을 렌더링하여 반환
@app.route('/map')
def map():
    return render_template("uni_map.html")  # templates 폴더 안에 있는 HTML 파일을 보여줌

# Flask 서버 실행을 위한 메인 함수
def main():
    app.run(debug=True, port=80)  # 디버그 모드 활성화, 포트 80번에서 실행

# 프로그램의 시작점 설정
if __name__ == '__main__':  # 이 스크립트가 직접 실행될 때만 main() 실행
    main()


** 학습내용 정리 **
Flask 웹 서버 구축

Flask를 사용해 간단한 웹 서버를 생성하고 실행하는 방법을 학습합니다. 
Flask()를 이용해 애플리케이션 객체를 생성하고, 이를 통해 라우팅과 서버 동작을 구현할 수 있습니다.

라우팅과 함수 매핑

@app.route() 데코레이터를 사용해 특정 URL 경로와 함수(뷰)를 연결하는 방법을 익힐 수 있습니다. 
경로에 따라 다른 함수가 실행되며, 지정된 데이터를 반환하거나 HTML을 렌더링할 수 있습니다.

HTML 템플릿 렌더링

render_template()를 활용해 templates 폴더 내의 HTML 파일을 렌더링하여 동적 웹 페이지를 반환하는 기술을 익힐 수 있습니다.

디버그 모드 활성화

debug=True 옵션을 설정하여 개발 중에 코드 변경 사항을 자동으로 반영하고, 오류를 확인하기 쉽게 만드는 방법을 학습합니다.

포트 설정 및 실행

Flask 서버를 특정 포트(예: 80번)에서 실행하며, 기본 설정을 조정하고 서버를 실행하는 방식을 배울 수 있습니다.

프로그램의 시작점 설정

if __name__ == '__main__': 구문을 사용하여 이 스크립트가 직접 실행될 때만 서버를 실행하도록 제어하는 방법을 학습합니다. 
이 구조는 재사용성을 높이며 다른 파일에서 이 코드를 가져와 사용할 때 유용합니다.
