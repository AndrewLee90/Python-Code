import threading  # threading 모듈을 import하여 멀티쓰레딩 구현 가능하게 설정합니다.
import time  # time 모듈을 import하여 시간 지연 기능을 사용할 수 있습니다.

def thread_1():
    # 쓰레드 1의 동작을 정의합니다.
    while True:  # 무한 루프를 통해 지속적으로 실행됩니다.
        print("쓰레드 1 동작")  # 쓰레드 1의 작업 내용을 출력합니다.
        time.sleep(1.0)  # 1초간 대기 후 다시 실행됩니다.

def thread_2():
    # 쓰레드 2의 동작을 정의합니다.
    while True:  # 무한 루프를 통해 지속적으로 실행됩니다.
        print("쓰레드2 동작")  # 쓰레드 2의 작업 내용을 출력합니다.
        time.sleep(3.0)  # 3초간 대기 후 다시 실행됩니다.

# 쓰레드 1을 생성하고 실행합니다.
t1 = threading.Thread(target=thread_1)
t1.start()

# 쓰레드 2를 생성하고 실행합니다.
t2 = threading.Thread(target=thread_2)
t2.start()

while True:
    # 메인 루프에서 독립적으로 동작합니다.
    print("메인동작")  # 메인 동작의 내용을 출력합니다.
    time.sleep(2.0)  # 2초간 대기 후 다시 실행됩니다.


** 학습내용 정리 **
1. 멀티쓰레딩 구현

threading.Thread를 사용하여 멀티쓰레딩을 구현하는 방법을 배울 수 있습니다.
target 매개변수로 실행할 함수를 전달하고, start() 메서드를 통해 쓰레드를 실행하는 과정을 학습합니다.

2. 쓰레드 동작 이해

각각의 쓰레드(thread_1, thread_2)가 독립적으로 실행되며 서로 다른 작업을 병렬로 수행하는 방식을 이해할 수 있습니다.
쓰레드 간 작업 간격 및 실행 주기를 설정하기 위해 time.sleep() 함수의 사용법을 익힐 수 있습니다.

3. 메인 루프와 쓰레드 동작 병렬 처리

메인 루프에서 반복 작업("메인동작" 출력)을 수행하면서 쓰레드가 동시에 동작하는 멀티태스킹 환경을 구현하는 방법을 배웁니다.
쓰레드와 메인 프로그램이 독립적으로 실행되는 병렬 처리의 개념을 학습할 수 있습니다.

4. 무한 루프 구현

while True: 구문을 사용해 종료 조건이 없는 무한 루프를 생성하고, 이를 쓰레드와 결합해 지속적인 동작을 구현하는 기법을 학습합니다.

5. 코드 효율성 및 유지보수

쓰레드를 활용하여 작업을 분리하고, 각 작업의 실행 주기 및 역할을 명확히 정의함으로써 코드의 효율성과 가독성을 높이는 방법을 배울 수 있습니다.



** threading 모듈 **
파이썬 내에서, 멀티스레딩을 구현할 수 있음.
한 프로그램에서 여러 작업을 동시에 실행 할 수 있게 도와주는 기능.

멀티스레드는 Input / Output 중심 작업에서 유용.

==효율적인 상황==

ㅁ네트워크 요청처리
> 웹서버, API 호출 등

ㅁGUI 프로그램의 백그라운드 작업
> 게임엔진, UI응답성 향상

ㅁDB Query 실행
> 대량 요청 처리 가능
ㅁ파일 업로드/다운로드
ㅁ실시간 로그 처리

==비효율적인 상황==
머신러닝, 대규모 연산 등에는 제성능을 발휘하기 어렵다.
