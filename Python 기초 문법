- Python 기초 문법

input / print / list / tuple / dic / == / ! = / if / elif / else / str / for/ in / range 

input() → 사용자 입력을 받는 함수
print() → 값을 출력하는 함수

list → 여러 개의 값을 저장하는 변경 가능한 배열
tuple → 여러 개의 값을 저장하지만 변경 불가능한 배열

### ✅ **튜플 vs 리스트 차이점**

| 비교 항목              | **튜플 (`tuple`)**         | **리스트 (`list`)**       |
|---------------------- |----------------------------|--------------------------|
| **기본 구조**          | `()` (소괄호)              |  `[]` (대괄호)            |
| **값 변경 가능 여부**  | ❌ 변경 불가               |  ✅ 변경 가능             |
| **속도**              | ✅ 더 빠름                 |  ❌ 상대적으로 느림       |
| **사용 목적**         | 변경되지 않는 데이터 저장    |  변경이 필요한 데이터 저장  |



import / while / for / try / except / def 개념정리

| 문법              | 역할                | 사용 방식                   | 특징                           | 주의할 점                                                |
|-------------------|---------------------|-----------------------------|--------------------------------|---------------------------------------------------------|
| **`import`**      | 모듈 불러오기       | `import 모듈명`             | 외부 또는 내장 모듈을 사용 가능  | - 불필요한 모듈은 메모리 낭비 유발 가능<br>- `from 모듈명 import *` 사용 시 네임스페이스 오염 위험 |
| **`while`**       | 반복문              | `while 조건:`               | 조건이 참(`True`)일 때 반복 실행 | - 종료 조건이 없으면 무한 루프<br>- 반복 횟수 증가 시 성능 저하 가능  |
| **`for`**         | 반복문              | `for 변수 in iterable:`     | `iterable` 데이터를 순회하며 반복| - `range()`에 큰 값 설정 시 메모리 사용 증가 가능<br>- `break`, `continue` 사용 시 흐름 주의 |
| **`try-except`**  | 예외 처리           | `try: ... except 예외:`      | 오류 방지 및 특정 예외 처리 가능 | - 광범위한 예외 처리(`except Exception:`)는 예상치 못한 버그를 숨길 가능성 있음           |
| **`def` (함수)**  | 함수 정의           | `def 함수이름(매개변수):`    | 작업을 수행하는 코드 블록 정의 및 재사용 | - 전역 변수 남발 시 유지보수 어려움<br>- 긴 함수는 가독성 저하로 적절히 분리해야 함      |
