if my_number > random_number:
    # 사용자가 입력한 숫자가 랜덤 숫자보다 크다면 "다운"을 출력합니다.
    print("다운")
elif my_number < random_number:
    # 사용자가 입력한 숫자가 랜덤 숫자보다 작다면 "업"을 출력합니다.
    print("업")
elif my_number == random_number:
    # 사용자가 입력한 숫자가 랜덤 숫자와 같다면, 게임이 끝나고 축하 메시지와 시도 횟수를 출력합니다.
    print(f"축하합니다.{game_count}회 만에 맞췄습니다")
    # 정답을 맞췄으니 반복문을 종료합니다.
    break

# 위의 조건이 끝난 후에는 시도 횟수를 1 증가시킵니다.
game_count = game_count + 1
except:
    # 코드 실행 중 예외(에러)가 발생한 경우, 숫자를 입력하지 않았을 가능성이 있음을 알립니다.
    print("에러가 발생하였습니다. 숫자를 입력하세요")


## 학습내용 정리 ##

1. 조건문 (if-elif-else)
조건에 따라 다른 명령을 실행하는 기본 로직을 배울 수 있습니다.

if, elif, else의 사용법과 조건을 평가하는 흐름을 이해할 수 있습니다.

조건문을 설계할 때 논리적 흐름이 중요한 이유를 학습할 수 있습니다.

2. 반복문 (while)
게임이나 특정 작업에서 반복적으로 실행되는 코드를 작성하는 방법을 배울 수 있습니다.

while과 같은 반복문의 특징과 종료 조건을 적절히 설정하는 중요성을 배울 수 있습니다.

무한 루프를 방지하는 방법과 반복문을 적절히 제어하는 방법을 학습합니다.

3. 변수와 연산
사용자 입력을 통해 변수 값을 비교하고 변경하는 방법을 배울 수 있습니다.

game_count = game_count + 1과 같이 변수를 업데이트하는 과정을 이해할 수 있습니다.

4. 사용자 입력 처리
사용자로부터 값을 받아서 사용하는 로직을 연습할 수 있습니다.

입력된 값이 예상치 못한 상황을 초래할 수 있음을 이해하고, 이에 대비하는 방법을 배웁니다.

5. 예외 처리 (try-except)
예외 처리를 통해 코드 실행 중에 발생할 수 있는 에러를 방지하고 처리하는 방법을 배울 수 있습니다.

예외 발생 시 프로그램이 중단되지 않고 정상적으로 종료되도록 만드는 방법을 학습합니다.

6. 문자열 포매팅
f-string을 사용하여 문자열과 변수를 결합하는 방법을 배울 수 있습니다.

사용자 친화적인 메시지를 출력하는 기술을 익힐 수 있습니다.

7. 디버깅과 테스트
코드를 테스트하며 발생할 수 있는 논리적 오류와 예외 상황을 발견하고 수정하는 방법을 배울 수 있습니다.

